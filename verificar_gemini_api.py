"""
Script de Verifica√ß√£o da Configura√ß√£o da API Gemini
Execute este script para diagnosticar problemas de configura√ß√£o
"""

from dotenv import load_dotenv
import os
import sys

def verificar_configuracao_gemini():
    print("üîç VERIFICA√á√ÉO DA CONFIGURA√á√ÉO DA API GEMINI")
    print("=" * 50)

    # 1. Verificar se dotenv est√° instalado
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv est√° instalado")
    except ImportError:
        print("‚ùå python-dotenv N√ÉO est√° instalado")
        print("   Execute: pip install python-dotenv")
        return False

    # 2. Verificar se arquivo .env existe
    if os.path.exists('.env'):
        print("‚úÖ Arquivo .env encontrado")
    else:
        print("‚ùå Arquivo .env N√ÉO encontrado")
        print("   Crie um arquivo .env no diret√≥rio raiz do projeto")
        return False

    # 3. Carregar vari√°veis de ambiente
    load_dotenv()

    # 4. Verificar se a chave est√° definida
    api_key = os.getenv("GEMINI_API_KEY")
    if api_key:
        print("‚úÖ GEMINI_API_KEY encontrada")
        print(f"   Primeiros 10 caracteres: {api_key[:10]}...")

        # 5. Verificar formato da chave
        if api_key.startswith('AIzaSy'):
            print("‚úÖ Formato da chave parece correto")
        else:
            print("‚ö†Ô∏è  Formato da chave pode estar incorreto")
            print("   Chaves do Gemini geralmente come√ßam com 'AIzaSy'")

        # 6. Verificar comprimento da chave
        if len(api_key) >= 35:
            print("‚úÖ Comprimento da chave parece adequado")
        else:
            print("‚ö†Ô∏è  Chave pode estar incompleta (muito curta)")

    else:
        print("‚ùå GEMINI_API_KEY N√ÉO encontrada")
        print("   Verifique se a vari√°vel est√° definida no arquivo .env")
        return False

    # 7. Testar importa√ß√£o do CrewAI
    try:
        from crewai import LLM
        print("‚úÖ CrewAI est√° instalado")
    except ImportError:
        print("‚ùå CrewAI N√ÉO est√° instalado")
        print("   Execute: pip install crewai")
        return False

    # 8. Tentar criar inst√¢ncia do LLM (sem fazer chamadas)
    try:
        llm = LLM(
            model='gemini/gemini-1.5-flash',
            api_key=api_key,
            temperature=0.5
        )
        print("‚úÖ Inst√¢ncia do LLM criada com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao criar inst√¢ncia do LLM: {e}")
        return False

    print("\nüéâ CONFIGURA√á√ÉO PARECE ESTAR CORRETA!")
    print("   Voc√™ pode tentar executar o sistema agora.")
    return True

if __name__ == "__main__":
    sucesso = verificar_configuracao_gemini()
    sys.exit(0 if sucesso else 1)
